# Copyright [2024] [Phil Chen]

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: 2010-09-09
Description: VPC with Encrypted RDS Template

Parameters:
  RdsMasterPassword:
    Type: String
    NoEcho: true
    Description: Master Password for RDS

Mappings:

    NetworkToSubnet:
        "10.0.0.0":
            PubSubnetZoneA: "10.0.10.0/24"
            PrivSubnetZoneA: "10.0.20.0/24"
            PubSubnetZoneB: "10.0.30.0/24"
            PrivSubnetZoneB: "10.0.40.0/24"

Resources:

    VPC:
        Type: 'AWS::EC2::VPC'
        Properties:
            CidrBlock:
                'Fn::Join': [ '/', [ '10.0.0.0', '16' ] ]
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: 'default'
            Tags:
                - Key: 'Name'
                  Value:
                      Ref: 'AWS::StackName'

    # Internet accessable subnet in the first availability zone
    PubSubnetZoneA:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone:
                Fn::Select:
                - '0'
                - Fn::GetAZs:
                    Ref: 'AWS::Region'
            CidrBlock:
                Fn::FindInMap:
                - NetworkToSubnet
                - '10.0.0.0'
                - PubSubnetZoneA
            MapPublicIpOnLaunch: 'True'
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Public', 'Zone A', !Ref 'AWS::StackName' ] ]

    # Non-internet accessable subnet in the first availability zone
    PrivSubnetZoneA:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone:
                Fn::Select:
                - '0'
                - Fn::GetAZs:
                    Ref: 'AWS::Region'
            CidrBlock:
                Fn::FindInMap:
                - NetworkToSubnet
                - '10.0.0.0'
                - PrivSubnetZoneA
            MapPublicIpOnLaunch: 'False'
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Private', 'Zone A', !Ref 'AWS::StackName' ] ]

    # Internet accessable subnet in the second availability zone
    PubSubnetZoneB:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone:
                Fn::Select:
                - '1'
                - Fn::GetAZs:
                    Ref: 'AWS::Region'
            CidrBlock:
                Fn::FindInMap:
                - NetworkToSubnet
                - '10.0.0.0'
                - PubSubnetZoneB
            MapPublicIpOnLaunch: 'True'
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Public', 'Zone B', !Ref 'AWS::StackName' ] ]

    # Non-internet accessable subnet in the second availability zone
    PrivSubnetZoneB:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone:
                Fn::Select:
                - '1'
                - Fn::GetAZs:
                    Ref: 'AWS::Region'
            CidrBlock:
                Fn::FindInMap:
                - NetworkToSubnet
                - '10.0.0.0'
                - PrivSubnetZoneB
            MapPublicIpOnLaunch: 'False'
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Private', 'Zone B', !Ref 'AWS::StackName' ] ]

    # Gateway to the internet
    InternetGateway:
        Type: 'AWS::EC2::InternetGateway'
        Properties:
            Tags:
                - Key: 'Name'
                  Value:
                      Ref: 'AWS::StackName'

    # Associate the gateway to the VPC
    GatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId:
                Ref: 'InternetGateway'
            VpcId:
                Ref: 'VPC'

    # Routing table for the public subnet in availability zone A
    RouteTablePubZoneA:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Public', 'Zone A', !Ref 'AWS::StackName' ] ]

    # Routing table for the public subnet in availability zone B
    RouteTablePubZoneB:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Public', 'Zone B', !Ref 'AWS::StackName' ] ]

    # Route traffic through the internet gateway
    RoutePubZoneA:
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: '0.0.0.0/0'
            GatewayId:
                Ref: 'InternetGateway'
            RouteTableId:
                Ref: 'RouteTablePubZoneA'

    # Route traffic through the internet gateway
    RoutePubZoneB:
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId:
                Ref: 'InternetGateway'
            RouteTableId:
                Ref: 'RouteTablePubZoneB'

    # Associate public subnet to its routing table
    RouteAssociationPubSubnetZoneA:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: 'PubSubnetZoneA'
            RouteTableId:
                Ref: 'RouteTablePubZoneA'

    # Associate public subnet to its routing table
    RouteAssociationPubSubnetZoneB:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: 'PubSubnetZoneB'
            RouteTableId:
                Ref: 'RouteTablePubZoneB'

    # Routing table for the private subnet in availability zone A
    RouteTablePrivZoneA:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Private', 'Zone A', !Ref 'AWS::StackName' ] ]

    # Routing table for the private subnet in availability zone B
    RouteTablePrivZoneB:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Private', 'Zone B', !Ref 'AWS::StackName' ] ]

    # Associate the private subnet with its routing table
    RouteAssociationPrivSubnetZoneA:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: 'PrivSubnetZoneA'
            RouteTableId:
                Ref: 'RouteTablePrivZoneA'

    # Associate the private subnet with its routing table
    RouteAssociationPrivSubnetZoneB:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: 'PrivSubnetZoneB'
            RouteTableId:
                Ref: 'RouteTablePrivZoneB'

    # RDS security group inbound and outbound access
    RDSSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: RDSSecurityGroup
        VpcId: !Ref VPC
        GroupDescription: Enable MySql access via user defined port
        SecurityGroupIngress:
          - CidrIp: 10.0.0.0/16
            FromPort: 3306
            IpProtocol: tcp
            ToPort: 3306

    # RDS Subnet Group
    RDSDBSubnetGroup:
      Type: "AWS::RDS::DBSubnetGroup"
      Properties:
        DBSubnetGroupDescription: "description"
        DBSubnetGroupName: "RDS_DB_PrivSubnet"
        SubnetIds:
          - !Ref PrivSubnetZoneA
          - !Ref PrivSubnetZoneB

    # KMS RDS encryption key
    rdsKey:
      Type: AWS::KMS::Key
      Properties:
        KeyPolicy:
          Version: 2012-10-17
          Id: key-rds
          Statement:
            - Sid: Enable IAM User Permissions
              Effect: Allow
              Principal:
                AWS: !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - ':root'
              Action: 'kms:*'
              Resource: '*'
    rdsAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/rds
        TargetKeyId:
          Ref: rdsKey

    # RDS MySQL database configuration
    MySQLDatabase:
      Type: 'AWS::RDS::DBInstance'
      Properties:
        Engine: MySQL
        DBName: "RDS"
        StorageEncrypted: true
        KmsKeyId: !Ref rdsKey
        MasterUsername: 'dbuser'
        MasterUserPassword: !Ref RdsMasterPassword
        DBInstanceClass: db.t3.micro
        AllocatedStorage: 5
# To add a specific storage type add "StorageType: gp2, io1, or standard" for io1 you must also declare "Iops: with an integer equal or greater then 1000"
# gp2 is General Purpose (SSD), io1 is provisioned IOPS, and standard is magnetic
        DBSubnetGroupName: !Ref RDSDBSubnetGroup
        VPCSecurityGroups:
          - Ref: RDSSecurityGroup

Outputs:
    VPC:
        Description: 'Virtual Private Cloud'
        Value:
          Ref: 'VPC'
    RDSDBSubnetGroup:
        Description: 'RDS Private Subnet Group'
        Value:
          Ref: 'RDSDBSubnetGroup'
    RDSSecurityGroup:
      Description: 'RDS Security Group'
      Value:
        Ref: 'RDSSecurityGroup'
    rdsAlias:
      Description: 'RDS KMS Encryption Key Alias'
      Value:
        Ref: 'rdsAlias'
